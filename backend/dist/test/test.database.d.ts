import { OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { DataSource, EntityManager, Repository, EntityTarget, ObjectLiteral, DeepPartial } from 'typeorm';
import { User } from '../entities/user.entity';
import { Gym } from '../entities/gym.entity';
import { Course } from '../entities/course.entity';
import { Exercise } from '../entities/exercise.entity';
import { Training } from '../entities/training.entity';
import { Nutrition } from '../entities/nutrition.entity';
import { Promotion } from '../entities/promotion.entity';
export declare class TestDatabaseService implements OnModuleInit, OnModuleDestroy {
    private dataSource;
    private manager;
    private userRepository;
    private gymRepository;
    private courseRepository;
    private exerciseRepository;
    private trainingRepository;
    private nutritionRepository;
    private promotionRepository;
    onModuleInit(): Promise<void>;
    onModuleDestroy(): Promise<void>;
    cleanDatabase(): Promise<void>;
    getUserRepository(): Repository<User>;
    getGymRepository(): Repository<Gym>;
    getCourseRepository(): Repository<Course>;
    getExerciseRepository(): Repository<Exercise>;
    getTrainingRepository(): Repository<Training>;
    getNutritionRepository(): Repository<Nutrition>;
    getPromotionRepository(): Repository<Promotion>;
    runInTransaction<T>(operation: (entityManager: EntityManager) => Promise<T>): Promise<T>;
    clearTable(entity: EntityTarget<ObjectLiteral>): Promise<void>;
    clearAllTables(): Promise<void>;
    createTestData<T extends ObjectLiteral>(entity: EntityTarget<T>, data: DeepPartial<T>): Promise<T>;
    createTestDataInBulk<T extends ObjectLiteral>(entity: EntityTarget<T>, dataArray: DeepPartial<T>[]): Promise<T[]>;
    removeTestData<T extends ObjectLiteral>(entity: EntityTarget<T>, condition: Partial<T>): Promise<T[]>;
    removeAllTestData(): Promise<void>;
    verifyTestData<T extends ObjectLiteral>(entity: EntityTarget<T>, condition: Partial<T>): Promise<boolean>;
    getTestData<T extends ObjectLiteral>(entity: EntityTarget<T>, condition: Partial<T>): Promise<T[]>;
    getDataSource(): DataSource;
    getManager(): EntityManager;
}
